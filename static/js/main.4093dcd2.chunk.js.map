{"version":3,"sources":["components/ChatMessage.jsx","components/ChatRoom.jsx","App.jsx","index.js"],"names":["ChatMessage","props","message","text","uid","messageClass","imageURL","className","src","Typing","ChatRoom","dummy","useRef","useState","messages","setMessage","formValue","setFormValue","useEffect","lastMsg","length","placeHolder","id","Math","random","toString","substr","current","scrollIntoView","behavior","msg","a","url","fetch","headers","Authorization","res","json","console","log","airesp","sendMessage","e","preventDefault","newMsg","map","ref","onSubmit","value","onChange","target","placeholder","type","disabled","aria-hidden","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAEe,SAASA,EAAYC,GAAQ,IAAD,EACnBA,EAAMC,QAApBC,EADiC,EACjCA,KAAMC,EAD2B,EAC3BA,IAERC,EAAuB,IAARD,EAAY,OAAS,WACpCE,EACI,IAARF,EACI,iDACA,2EAEN,OACE,mCACE,sBAAKG,UAAS,kBAAaF,GAA3B,UACE,qBAAKG,IAAKF,IACA,gBAATH,EAAyB,cAAC,EAAD,IAAa,4BAAIA,SAMnD,IAAMM,EAAS,kBACb,sBAAKF,UAAU,SAAf,UACE,qBAAKA,UAAU,eACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,mBCtBJ,SAASG,IACtB,IAAMC,EAAQC,iBAAO,MADY,EAEFC,mBAAS,IAFP,mBAE1BC,EAF0B,KAEhBC,EAFgB,OAGCF,mBAAS,IAHV,mBAG1BG,EAH0B,KAGfC,EAHe,KAKjCC,qBAAU,WACR,IAAMC,EAAUL,EAASA,EAASM,OAAS,GAC3C,GAAID,GAA2B,IAAhBA,EAAQf,IAAW,CAChC,IAAMiB,EAAc,CAClBC,GAAI,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAC/CvB,KAAM,cACNC,IAAK,GAEPW,EAAW,GAAD,mBAAKD,GAAL,CAAeO,KACzBV,EAAMgB,QAAQC,eAAe,CAAEC,SAAU,WACzC3B,EAAQiB,EAAQhB,UAIpB,IAAMD,EAAO,uCAAG,WAAO4B,GAAP,qBAAAC,EAAA,6DACRC,EADQ,2DACkDF,GADlD,SAEEG,MAAMD,EAAK,CACzBE,QAAS,CACPC,cACE,oFALQ,cAEVC,EAFU,gBAQGA,EAAIC,OARP,OAQVA,EARU,OASdC,QAAQC,IAAIF,GACNG,EAASH,EAAKnC,QACR,EAEZa,EAAW,GAAD,mBACLD,GADK,CAER,CACEQ,GAAI,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAC/CvB,KAAMqC,EACNpC,IAPQ,MAUZO,EAAMgB,QAAQC,eAAe,CAAEC,SAAU,WArB3B,4CAAH,sDAwBPY,EAAW,uCAAG,WAAOC,GAAP,eAAAX,EAAA,sDAClBW,EAAEC,iBAEQ,EAEJC,EAAS,CACbtB,GAAI,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAC/CvB,KAAMa,EACNZ,IALQ,GAQVW,EAAW,GAAD,mBAAKD,GAAL,CAAe8B,KACzB3B,EAAa,IAEbN,EAAMgB,QAAQC,eAAe,CAAEC,SAAU,WAdvB,2CAAH,sDAiBjB,OACE,qCACE,iCACGf,GACCA,EAAS+B,KAAI,SAACf,GAAD,OAAS,cAAC9B,EAAD,CAA0BE,QAAS4B,GAAjBA,EAAIR,OAE9C,sBACA,sBAAMwB,IAAKnC,OAGb,uBAAMoC,SAAUN,EAAhB,UACE,uBACEO,MAAOhC,EACPiC,SAAU,SAACP,GAAD,OAAOzB,EAAayB,EAAEQ,OAAOF,QACvCG,YAAY,yBAGd,wBAAQ5C,UAAU,SAAS6C,KAAK,SAASC,UAAWrC,EAApD,SACE,mBAAGT,UAAU,oBAAoB+C,cAAY,iBC9DxCC,MAhBf,WACE,OACE,sBAAKhD,UAAU,MAAf,UACE,iCACE,4CACY,mBAAGA,UAAU,sBAI3B,kCACE,cAACG,EAAD,UCRR8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.4093dcd2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ChatMessage(props) {\n  const { text, uid } = props.message;\n\n  const messageClass = uid === 1 ? \"sent\" : \"received\";\n  const imageURL =\n    uid === 1\n      ? \"https://img.icons8.com/color/48/000000/fox.png\"\n      : \"https://avatars.dicebear.com/api/bottts/Coo.svg?colors[]=blue&colorful=1\";\n\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        <img src={imageURL} />\n        {text === \"thinking...\" ? <Typing /> : <p>{text}</p>}\n      </div>\n    </>\n  );\n}\n\nconst Typing = () => (\n  <div className=\"typing\">\n    <div className=\"typing-dot\"></div>\n    <div className=\"typing-dot\"></div>\n    <div className=\"typing-dot\"></div>\n  </div>\n);\n\n// import React from \"react\";\n\n// export default class ChatMessage extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { hasError: false };\n//     const { text, uid } = props.message;\n\n    \n//   }\n\n//   static getDerivedStateFromError(error) {\n//     // Update state so the next render will show the fallback UI.\n//     return { hasError: true };\n//   }\n\n//   componentDidCatch(error, errorInfo) {\n//     // You can also log the error to an error reporting service\n//     logErrorToMyService(error, errorInfo);\n//   }\n\n  \n\n//   render() {\n//     if (this.state.hasError) {\n\n//       // You can render any custom fallback UI\n//       return (\n//         <>\n//           <div className={`message ${messageClass}`}>\n//             <img src={imageURL} />\n//             {text === \"thinking...\" ? (\n//               <Typing />\n//             ) : (\n//               <p>Oops.. Something went wrong!</p>\n//             )}\n//           </div>\n//         </>\n//       );\n//     } else if (!this.state.hasError) {\n//       return (\n//         <>\n//           <div className={`message ${messageClass}`}>\n//             <img src={imageURL} />\n//             {text === \"thinking...\" ? <Typing /> : <p>{text}</p>}\n//           </div>\n//         </>\n//       );\n//     }\n//   }\n// }\n\n// const Typing = () => (\n//   <div className=\"typing\">\n//     <div className=\"typing-dot\"></div>\n//     <div className=\"typing-dot\"></div>\n//     <div className=\"typing-dot\"></div>\n//   </div>\n// );\n\n// const messageClass = uid === 1 ? \"sent\" : \"received\";\n// const imageURL = uid === 1 ? \"https://img.icons8.com/color/48/000000/fox.png\" : \"https://avatars.dicebear.com/api/bottts/Coo.svg?colors[]=blue&colorful=1\";","import ChatMessage from \"./ChatMessage\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\nexport default function ChatRoom() {\n  const dummy = useRef(null);\n  const [messages, setMessage] = useState([]);\n  const [formValue, setFormValue] = useState(\"\");\n\n  useEffect(() => {\n    const lastMsg = messages[messages.length - 1];\n    if (lastMsg && lastMsg.uid === 1) {\n      const placeHolder = {\n        id: \"_\" + Math.random().toString(36).substr(2, 9),\n        text: \"thinking...\",\n        uid: 2,\n      };\n      setMessage([...messages, placeHolder]);\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n      message(lastMsg.text);\n    }\n  });\n\n  const message = async (msg) => {\n    const url = `https://api.snowflakedev.org/api/chatbot?message=${msg}`;\n    let res = await fetch(url, {\n      headers: {\n        Authorization:\n          \"ODUyNzczNzQ4NDExMjAzNTg1.MTYzMTA4Nzg0MzI2Ng==.cd7fba59aca5747ef62bf216cba0b96d\",\n      },\n    });\n    let json = await res.json();\n    console.log(json);\n    const airesp = json.message;\n    const uid = 2;\n\n    setMessage([\n      ...messages,\n      {\n        id: \"_\" + Math.random().toString(36).substr(2, 9),\n        text: airesp,\n        uid,\n      },\n    ]);\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    let uid = 1;\n\n    const newMsg = {\n      id: \"_\" + Math.random().toString(36).substr(2, 9),\n      text: formValue,\n      uid,\n    };\n\n    setMessage([...messages, newMsg]);\n    setFormValue(\"\");\n\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n\n        <p></p>\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=\"Type your text here!\"\n        />\n\n        <button className=\"submit\" type=\"submit\" disabled={!formValue}>\n          <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\n        </button>\n      </form>\n    </>\n  );\n}\n","import \"./App.css\";\nimport ChatRoom from \"./components/ChatRoom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          Chat with <i className=\"fas fa-robot\"></i>\n        </h1>\n      </header>\n\n      <section>\n        <ChatRoom />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}